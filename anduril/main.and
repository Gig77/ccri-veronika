title = "RNA-seq ETV6-RUNX1 Knock-Down Veronika"
shortName = "ER_KD_Veronika"
authors = "Christian Frech and Marko Laakso"

//------------------------------------------------------------------------------------------------
//--- INCLUDED REPORTS
//------------------------------------------------------------------------------------------------

runGSEA = false
runNVC = false
runNetwork = true

//------------------------------------------------------------------------------------------------
//--- INPUT DATA
//------------------------------------------------------------------------------------------------

inputBamDir       = INPUT(path="/mnt/projects/veronika/data/bam", recursive=false)
inputSamples      = INPUT(path="/mnt/projects/veronika/data/samples.csv")
inputSampleGroups = INPUT(path="/mnt/projects/veronika/data/sample_groups.csv")
inputComparisons  = INPUT(path="/mnt/projects/veronika/data/comparisons.csv")
gtf               = INPUT(path="/mnt/projects/veronika/data/Homo_sapiens.GRCh37.75.etv6runx1.gtf.gz")
gtfRunx1Ex1       = INPUT(path="/mnt/projects/veronika/data/runx1ex1.gtf")
gtfEtv6Ex6to8     = INPUT(path="/mnt/projects/veronika/data/etv6Ex6to8.gtf")
geneAnnot         = INPUT(path="/mnt/projects/veronika/data/ensembl.homo_sapiens_75_37.geneAnnotations.tsv") // downloaded via Ensembl biomart http://feb2014.archive.ensembl.org/biomart/martview/b57730c5d3013cd648bcd2c966113d42
geneGO            = INPUT(path="/opt/moksiskaan/pipeline/exec/output/geneGO_9606.csv")                              // Gene Ontology annotations of all genes; comes with anduril-moksiskaan Docker image
enrichmentTable   = INPUT(path="/opt/moksiskaan/pipeline/exec/output/GOEnrichment_9606.csv")                        // Moksiskaan specific a priori probabilities for the Gene ontology terms; comes with anduril-moksiskaan Docker image
ensemblDb         = INPUT(path="/usr/local/share/anduril-bundles/moksiskaan/etc/ensemblHomoSapiens.properties")     // JDBC parameters for Ensembl~\cite{Flicek2008} database; comes with anduril-moksiskaan Docker image
genesetAnnotation = INPUT(path="/mnt/projects/generic/data/ccri/geneset_annotation.tsv")                            // assigns gene sets to categories for filtering

//------------------------------------------------------------------------------------------------
//--- CONSTANTS
//------------------------------------------------------------------------------------------------

maxNA    		= 0.90    // fraction of samples allowed to have NA values before gene is discarded
pGOEnrich       = 0.01    // minimum p-value to call a GO term enriched 

hyperlinkRuleEnsemblGeneCards = StringInput(content=
	"URL\trefCol\tvalueCol\n" +
	"http://www.ensembl.org/id/$ID$\tEnsembl\tEnsembl\n" +
	"http://www.genecards.org/cgi-bin/carddisp.pl?gene=$ID$\tGene\tGene\n"
)

//------------------------------------------------------------------------------------------------
//--- PRELUDE
//------------------------------------------------------------------------------------------------

inputBamFiles = Folder2Array(folder1 = inputBamDir, filePattern = "^(32\\d+)_.*[.]bam$")
moksiskaanInit = MoksiskaanInit(showLog='EnsemblImport,PathwayCommonsImport,PINAImport,WikiPathways')
ensemblRef = XrefLinkRule(moksiskaan = moksiskaanInit.connection, columns = "Ensembl=Ensembl", xrefTypes  = XrefType_Ensembl_gene)

@out.optOut1.filename = "Homo_sapiens.GRCh37.75.etv6runx1.runx1ex1.gtf"
gtfCustom = BashEvaluate
(
	var1 = gtf,
	var2 = gtfRunx1Ex1,
	var3 = gtfEtv6Ex6to8,
	script = '''
		tmpdir=$( gettempdir )
		set -ex

		# exclude existing entries overlapping with RUNX1 exon 1 and ETV6 exons 6-8
		zcat -f @var1@ | grep -P '36421.*"RUNX1"' | grep -vP "\ttranscript\t" > $tmpdir/exclude.gtf
		zcat -f @var1@ | grep -P '120[34].*"ETV6"' | grep -v 11802 >> $tmpdir/exclude.gtf
		zcat -f @var1@ | grep -vf $tmpdir/exclude.gtf > @optOut1@.part

		# add artificial genes consisting of RUNX1 exon 1 and ETV6 exons 6 to 8
		cat @var2@ @var3@ >> @optOut1@.part
		
		mv @optOut1@.part @optOut1@
	'''
)

@out.optOut1.filename = "Homo_sapiens.GRCh37.75.etv6runx1.runx1ex1.norRNA.gtf"
gtfNorRNA = BashEvaluate
(
	var1 = gtfCustom.optOut1,
	script = '''
		set -ex
		tmpdir=$( gettempdir )
		grep -P 'gene_biotype "(rRNA|Mt_rRNA)"' @var1@ | perl -ne '/(ENSG[^\"]+)/; print "$1\n"' | sort | uniq > $tmpdir/ensemblid.rrna
		cat @var1@ | grep -vf $tmpdir/ensemblid.rrna > @optOut1@
	'''
)

//------------------------------------------------------------------------------------------------
//--- SAMPLES
//------------------------------------------------------------------------------------------------

samples = record()
for entry : std.itercsv(inputSamples) 
{
	samples[""+entry.ID] =
	{
		'alias' = entry.Alias,
		'description' = entry.Description,
		'exclude' = false
	}
	
	if (entry.Exclude == "Yes" || entry.Exclude == "YES" || entry.Exclude == "yes") {
		samples[""+entry.ID]["exclude"] = true
	}
}

//------------------------------------------------------------------------------------------------
//--- SAMPLE GROUPS
//------------------------------------------------------------------------------------------------

removeExcludedSamples = REvaluate
(
	table1 = inputSamples,
	table2 = inputSampleGroups,
	script = StringInput(content='''
		excluded <- table1$Alias[toupper(table1$Exclude)=="YES"]
		table2$Members <- as.character(table2$Members)
		
		for (i in 1:nrow(table2)) {
		  m.old <- unlist(strsplit(table2$Members[i], ","))
		  m.new <- m.old[!m.old %in% excluded]
		  table2$Members[i] <- paste(m.new, collapse=",")
		}
		
		table.out <- table2
	''')
)
sampleGroups = removeExcludedSamples.table

//------------------------------------------------------------------------------------------------
//--- COMPARISONS
//------------------------------------------------------------------------------------------------

comparisons = record()
for comparison : std.itercsv(inputComparisons) 
{
	// fetch group names
	gCase    = null
	gControl = null
	for g : std.split(comparison.Members, ',')
	{
		if (gCase    == null) { gCase    = g } else
		if (gControl == null) { gControl = g } else
		std.fail("Too many groups listed for ", comparison.ID, " (", comparison.Description, "). Members = ", comparison.Members, sep='')
	}

	sampleIdLst = CSV2IDList
	(
		table1    = sampleGroups @require,
		columnIn  = "Members",
		columnOut = "Sample",
		isList    = true,
		regexp1   = "ID=(" + gCase + "|" + gControl + ")",
		@name     = "sampleIds_" + std.quote(comparison.ID, type="Anduril")
	)

	// add group record	
	comparisons[comparison.ID] = 
	{
		'caseG'       = gCase,
		'controlG'    = gControl,
		'otherG'      = comparison.NonMembers,
		'sampleIdLst' = sampleIdLst.ids,
		'sampleIds'   = std.strReplace(std.fRead(sampleIdLst.ids), "\n", ",", "^[^,]+,(.*)", "$1", ",$", ""),
		'fcLimit'     = comparison.fcLimit,
		'pLimit'      = comparison.pLimit,
		'qLimit'      = comparison.qLimit,
		'exprLimit'   = comparison.exprLimit,
		'desc'        = comparison.Description
	}
}

//------------------------------------------------------------------------------------------------
//--- EXPERIMENTAL SETUP REPORT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/veronika/anduril/includes/experimentalSetup.and"

experimentReport = experimentalSetupReport
(
	samples      = inputSamples,
	sampleGroups = sampleGroups,
	comparisons  = inputComparisons,
	sampleTableColumns = "ID,Alias,Batch,Description,harvested_by,File",
	sampleTableFormat  = "ccclcl"
)

//------------------------------------------------------------------------------------------------
//--- ALIGNMENT
//------------------------------------------------------------------------------------------------

alignedBams = record()
for bam : std.iterArray(inputBamFiles) 
{
	alias = samples[bam.key+""].alias
	@out.alignment.filename = alias + '.gsnap.sorted.dupmarked.bam'
	gsnap = GSNAP
	(
		reads    = INPUT(path=bam.file), 
		options  = "--db=g1k_v37_etv6runx1 --dir=/data_synology/anduril/docker-images/anduril-gsnap_2014_12_28-human_g1k_v37/db/human_g1k_v37 --use-splicing=g1k_v37.splicesites --use-snps=g1k_v37.snp138 --nthreads 15 --maxsearch=100 --npaths=1 --max-mismatches=1 --novelsplicing=0 --batch=4 --genome-unk-mismatch=0",
		docker   = "biowaste:5000/anduril/gsnap",
		@cpu     = 10, 
		@memory  = 40000,
		@name    = "gsnap_" + alias,
		@execute = "once" 
	)

	if (!samples[bam.key+""].exclude) {
		alignedBams[alias] = gsnap.alignment
	}
}

//------------------------------------------------------------------------------------------------
//--- EXPRESSION MATRIX
//------------------------------------------------------------------------------------------------

bamCounts  = {}
for sample, bam : alignedBams 
{
	@out.optOut1.filename = sample + '.htseq.counts'
	count = BashEvaluate
	(
		var1 = bam,
		var2 = gtfNorRNA.optOut1,
		script = "htseq-count -f bam -t exon -s no @var1@ @var2@ > @optOut1@.part && mv @optOut1@.part @optOut1@",
		@name = "htseq_" + sample
	)
	bamCounts[sample] = count.optOut1
}

htseqExprMatrix = HTSeqExprMatrix
(
	samples      = Array2CSV(array=bamCounts, @name="htseq_filelist"),
	inclusionKey = ""
)

deseqExprMatrix = DESeqExpr
(
	geneCounts  = bamCounts,
    counts      = false,
    maxNA       = 0.9,
    normalized  = true
)

//------------------------------------------------------------------------------------------------
//--- QUALITY CONTROL
//------------------------------------------------------------------------------------------------

include "/mnt/projects/veronika/anduril/includes/qc.and"

qcReport  = getQCReport
(
	samples                = samples,
	alignedBAMs            = alignedBams,
    gtf                    = gtfCustom.optOut1,
    countMatrix            = htseqExprMatrix.countArray["all"],
    force expr             = deseqExprMatrix.expr,
    force groups           = sampleGroups,
    force inputSamples     = inputSamples,
    readStatsSamplesPerRow = 6,
    readStatsYMax          = 60
)

// note: the NVC plot is currently not in use because no output is generated for some samples due to a problem with the RSeQC script

nvcs = record()
for sample, bam : alignedBams 
{
	//@out.optOut1.filename = sample + '.rseqc.htseq.counts'
	nvc = BashEvaluate
	(
		var1 = bam,
		param1 = sample,
		echoStdOut = true,
		script = """
			set -ex
			docker pull biowaste:5000/anduril/rseqc && \
				docker run --volumes-from anduril-master --workdir=$(dirname @optOut1@) biowaste:5000/anduril/rseqc \
					"read_NVC.py -x -q 30 -i <(samtools view -hbs 815.1 @var1@) -o @param1@"
			grep -P '(A_count|T_count|G_count|C_count|N_count|X_count|total|position)=' ${parameter_param1}.NVC_plot.r > ${parameter_param1}.NVC_data.r
			R --vanilla --slave -e 'source("'${parameter_param1}.NVC_data.r'"); df <- data.frame(sample=@param1@, A=A_count/total, C=C_count/total, G=G_count/total, T=T_count/total, N=N_count/total, X=X_count/total, cycle=position); library(reshape2); long <- melt(df, id.vars=c("sample", "cycle")); names(long)[3:4] <- c("nucleotide", "freq"); write.table(long, file=@optOut1@, col.names=T, row.names=F, quote=F, sep="\\t")'
		""",
		@name = "rseqc_nvc_" + sample,
		@enabled = runNVC
	)
	nvcs[sample] = nvc.optOut1
}

nvcsAllSamples = CSVJoin
(
	array   = nvcs,
	useKeys = false,
	@enabled = runNVC
)

nvcPlot = REvaluate
(
	table1 = nvcsAllSamples.csv,
	param1 = "NVC plot",
	param2 = "subsection",
	script = StringInput(content=
		'''
		# debugging
		#library(componentSkeleton)
		#rm(list=ls()) ; cf <- parse.command.file("/mnt/projects/veronika/results/anduril/execute/nvcPlot/_command")
		
		# read data and parameters
		instance.name <- get.metadata(cf, 'instanceName')	
		data <- CSV.read(get.input(cf, 'table1'))
		section.title <- get.parameter(cf, 'param1', type = 'string')
		section.type <- get.parameter(cf, 'param2', type = 'string')
					
		# lattice plot
		document.dir <- get.output(cf, 'document')
		plot.file <- sprintf('NVC_%s.pdf', instance.name)
		pdf(file.path(document.dir, plot.file))
		library(lattice)
		data$sample <- as.factor(as.character(data$sample))
		p <- xyplot(freq~cycle|sample, 
 		       group=nucleotide, 
		       data=data[data$nucleotide!="X",], 
		       type=c("l", "g"),
		       as.table=TRUE,
		       col=c("dark green","cyan","blue","black","orange"),
		       key=list(space="top",
		               lines=list(col=c("dark green","orange","blue","cyan","black"), lwd=2),
		               text=list(c("A","T","G","C","N")),
		               columns=5))
		print(p)
		dev.off()

		# prepare latex document
		tex <- character()
		tex <- c(tex, '\\clearpage')
		if (nchar(section.type) > 0) {
  			section.type=paste('\\',section.type,sep='') # if section type is defined, add escape in the beginning
		}
		if (nchar(section.title) > 0) {
  			tex <- c(tex, sprintf('%s{%s}\\label{%s}', section.type, section.title,	instance.name))
		}			
		tex <- c(tex, latex.figure(plot.file, image.height=16, caption="Nucleotide vs. cycle (NVC) plots for each sample."))		    			    
		document.out <- tex

		# finish up
		table.out <- data.frame() # not used
		return(0)
		'''),
	@enabled = runNVC
)

//------------------------------------------------------------------------------------------------
//--- DIFFERENTIAL GENE EXPRESSION ANALYSIS
//------------------------------------------------------------------------------------------------

gMoksisA = PiispanhiippaAnnotator(sourceKeys = deseqExprMatrix.expr @require,
                                  connection = moksiskaanInit.connection,
                                  inputDB    = XrefType_Ensembl_gene,
                                  organism   = Organism_Homo_sapiens,
                                  targetDB   = "BioentityName,DNARegion")

geneNames = CSVCleaner(original   = gMoksisA.bioAnnotation,
                       columns    = "sourceKey,BioentityName,DNARegion",
                       rename     = "sourceKey=Ensembl,BioentityName=Gene",
                       skipQuotes = "*",
                       trim       = true,
                       @keep      = true)


degAllLst  = record()        // unfiltered output of DESeq2 for each comparison
degCalledLst  = record()     // only significant DEGs for each comparison

// compute differential expression statistics with DESeq2

for ID, comparison : comparisons
{
	deseq = DESeq2
	(
		countMatrix             = htseqExprMatrix.countArray["all"],
		samples                 = inputSamples,
		force sampleGroups      = sampleGroups,
	    caseGroup               = comparison.caseG,
	    controlGroup            = comparison.controlG,
	    otherGroups             = comparison.otherG,
	    colSuffix               = ID,
	    minReplicatesForReplace = 7,
	    @name                   = "deseq_" + std.quote(ID, type="Anduril")
	)
	degAllLst[ID] = deseq.results

	// annotate deseq output with gene names, locations, and descriptions 
	quotedSampleIds = 'G."' + std.strReplace(comparison.sampleIds, ',', '", G."') + '"'	
	deseqAnnotated = TableQuery
	(
		table1 = deseq     @require,
		table2 = geneNames @require,
		table3 = geneAnnot @require,
		query  = '''
			SELECT G."ids"                        AS "ids",
			A."Gene"                              AS "Gene",
			SUBSTR(D."Description", 1, 65)        AS "Description",
			D."Chromosome Name"                   AS "chr",
			D."Gene Start (bp)"                   AS "start",
			D."Gene End (bp)"                     AS "end",
			CONCAT(D."Chromosome Name", D."Band") AS "Band",
			G."meanExprE'''+ID+'''"               AS "meanA",
			G."meanExprC'''+ID+'''"               AS "meanB",
			G."fc'''+ID+'''"                      AS "fc",
			G."p'''+ID+'''"                       AS "p",
			G."q'''+ID+'''"                       AS "q",
			CASEWHEN(G."fc'''+ID+'''" > 0, 1, -1) AS "status",
			'''+quotedSampleIds+'''
			FROM table1 G
				LEFT OUTER JOIN table2 AS A ON (G."ids" = A."Ensembl")
				LEFT OUTER JOIN table3 AS D ON (G."ids" = D."Ensembl Gene ID")
			ORDER BY ABS("fc") DESC, "q"
		''',
		@name  = "deseqAnnotated_" + std.quote(ID, type="Anduril")
	)
		
	// subset statistically significant DEGs
	degCalled = TableQuery
	(
		table1 = deseqAnnotated @require,
		query  = 
			"""
			SELECT DISTINCT *
			FROM   table1
				WHERE  (ABS("fc") >= """ + comparison.fcLimit + """) AND
					   ("p"       <= """ + comparison.pLimit  + """) AND
					   ("q"       <= """ + comparison.qLimit  + """) AND
					   (("meanA"  >= """ + comparison.exprLimit + """) OR
					   ( "meanB"  >= """ + comparison.exprLimit + """))
					   ORDER BY ABS("fc") DESC, "q"
			""",
			@name  = "degCalled_" + std.quote(ID, type="Anduril")
	)
	degCalledLst[ID] = degCalled.table	
}

//------------------------------------------------------------------------------------------------
//--- DEG REPORTS
//------------------------------------------------------------------------------------------------

include "/mnt/projects/veronika/anduril/includes/degTable.and"
include "/mnt/projects/veronika/anduril/includes/degBoxPlot.and"
include "/mnt/projects/veronika/anduril/includes/goClustering.and"
include "/mnt/projects/veronika/anduril/includes/goEnrichment.and"
include "/mnt/projects/veronika/anduril/includes/expressionHeatmap.and"

degReportLst = record()
deseqColumnTypes = StringInput(content="Table\tColumn\tType\ntable1\tfc\tDOUBLE\ntable1\tstatus\tINTEGER\n")  // required if degTable is empty (= no significant DEGs)
for ID, comparison : comparisons 
{	
	//--- VOLCANO PLOT -----------------------------------------------------------------------------------------------------//

	degVolcanoPlot = VolcanoPlot
	(
		expr = degAllLst[ID],
		geneNames = geneNames,
		sigthresh = comparison.qLimit,
		lfcthresh = comparison.fcLimit,
		labelTopN = 40,
		cexLabel = 0.3,
		cexPoint = 0.8,
		sampleSize = 1000,
		excludeGenes = "gag_env_pol",
		caption = "Scatter plot of log2 fold-changes vs. p-values (aka 'volcano plot') comparing gene expression between " + comparison.caseG + " and " + comparison.controlG + " samples.",
		sectionTitle="Volcano plot " + ID,
		sectionType="subsubsection",
		@name = "degVolcanoPlot_" + std.quote(ID, type="Anduril")
	)

	//--- TABLES WITH UP- AND DOWN-REULATED GENES --------------------------------------------------------------------------//

	degTableUp = getDEGTableReport
	(
		degs = degCalledLst[ID],
		degReportRefs = ensemblRef,
		direction = "up",
		comparison = comparison,
		ID=ID,
		section="Genes with higher expression in "+comparison.caseG+" than "+comparison.controlG+" samples",
		sectionType="subsubsection",
		@name = "degTableUp_" + std.quote(ID, type="Anduril")
	)

	degTableDn = getDEGTableReport
	(
		degs = degCalledLst[ID],
		degReportRefs = ensemblRef,
		direction = "down",
		comparison = comparison,
		ID=ID,
		section="Genes with lower expression in "+comparison.caseG+" than "+comparison.controlG+" samples",
		sectionType="subsubsection",
		@name = "degTableDn_" + std.quote(ID, type="Anduril")
	)

	//--- BOX PLOTS TOP UP- AND DOWN-REGULATED GENES ----------------------------------------------------------------------//

	degBoxplotUp = getDEGBoxPlots
	(
		degs = degCalledLst[ID],
		exprMatrix = deseqExprMatrix.expr,
		force sampleGroups=sampleGroups,
		geneAnnot=geneAnnot,
		direction="up",
		comparison=comparison,
		labelOutliers=false,
		cexGroupLabel=0.8,
		includeGroups="kd-ER-d3,kd-ER-d8,kd-ER-d15,kd-NT-d3,kd-NT-d8,kd-NT-d15",
		sectionType="subsubsection",
		@name = "degBoxplotUp_" + std.quote(ID, type="Anduril")
	)

	degBoxplotDn = getDEGBoxPlots
	(
		degs = degCalledLst[ID],
		exprMatrix = deseqExprMatrix.expr,
		force sampleGroups=sampleGroups,
		geneAnnot=geneAnnot,
		direction="down",
		comparison=comparison,
		labelOutliers=false,
		cexGroupLabel=0.8,
		includeGroups="kd-ER-d3,kd-ER-d8,kd-ER-d15,kd-NT-d3,kd-NT-d8,kd-NT-d15",
		sectionType="subsubsection",
		@name = "degBoxplotDn_" + std.quote(ID, type="Anduril")
	)

	//--- EXPRESSION HEATMAP --------------------------------------------------------------------------//

	exprMatrixFiltered = CSVFilter
	(
		csv            = deseqExprMatrix.expr,
		auxiliary      = degCalledLst[ID] @require,
		includeColumns = comparison.sampleIdLst,
		includeColumns = "RowName",
		colOrder       = true,
		@name          = "exprMatrix_" + std.quote(ID, type="Anduril")
	)                      

	exprHeatmap = getHeatmapReport
	(
		exprMatrix = exprMatrixFiltered,
		geneNames = geneNames,
		group = comparison,
		sectionType="subsubsection",
		@name = "heatmap" + std.quote(ID, type="Anduril")
	)

	//--- GO ENRICHMENT -------------------------------------------------------------------------------//

	goEnrichment = getGOEnrichmentReport
	(
		geneIds      = degCalledLst[ID],
		deseq        = degAllLst[ID],    // used to correct background gene set using only actually measured genes
		geneNames    = geneNames,
		geneGO       = geneGO,
		threshold    = pGOEnrich,
		ID           = ID,
		sectionTitle = "GO terms enriched in DEGs between " + comparison.caseG + " and " + comparison.controlG,
		sectionType  = "subsubsection",
		@name        = "goEnrichment" + std.quote(ID, type="Anduril")
	)

	//--- GENE INTERACTION NETWORK --------------------------------------------------------------------//
	
	statusTable = TableQuery
	(
		table1   = degCalledLst[ID] @require,
		table2   = degAllLst[ID] @require,
		columnTypes = deseqColumnTypes,
		query    = '''
			SELECT "ids" AS "Ensembl", "status" FROM table1
			UNION
			SELECT T2."ids" AS "Ensembl", 1 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 10 AND T2."q'''+ID+'''" < 0.01 AND T2."fc'''+ID+'''" >= 1
			UNION
			SELECT T2."ids" AS "Ensembl", -1 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 10 AND T2."q'''+ID+'''" < 0.01 AND T2."fc'''+ID+'''" <= -1
			UNION
			SELECT T2."ids" AS "Ensembl", 0 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 300 AND T2."q'''+ID+'''" >= 0.9 AND T2."fc'''+ID+'''" > -0.1 AND T2."fc'''+ID+'''" < 0.1
			UNION
			SELECT T2."ids" AS "Ensembl", -2 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" < 10
            ''',
		@name    = "statusTable_" + std.quote(ID, type="Anduril"),
		@enabled = runNetwork
	)
	
    network = InteractionNetwork
    (
    	force genes  = degCalledLst[ID],
		force status = statusTable,
		moksiskaan   = moksiskaanInit.connection,
		ensembl      = ensemblDb,
		organism     = Organism_Homo_sapiens,
		title        = "Interaction network of DEGs between " + comparison.caseG + " and " + comparison.controlG,
		linkTypes    = std.concat(sep=",",
			//LinkType_pathway_precedence,
			//LinkType_protein_protein_interaction,
			LinkType_chemical_reaction,
			LinkType_protein_activation,
			LinkType_protein_inhibition,
			LinkType_protein_state_change,
			LinkType_protein_binding,
			LinkType_protein_dissociation,
			LinkType_gene_expression,
			LinkType_gene_repression,
			LinkType_phosphorylation,
			LinkType_dephosphorylation,
			LinkType_glycosylation,
			LinkType_ubiquitination,
			LinkType_deubiquitination,
			LinkType_methylation,
			LinkType_demethylation,
			LinkType_acetylation,
			LinkType_deacetylation,
			LinkType_sumoylation,
			LinkType_desumoylation
		),
		annotRules        = "",
		bioentityTypes    = BioentityType_gene,
		maxGap            = 1,
		cytoscape         = false,
		useStudies        = "",
		hideGaps          = false,
		isolateGroupNames = false,
		expand            = "connected",
		statusFilter      = "NA",
		sectionType       = "subsubsection",
		@name             = "network_" + std.quote(ID, type="Anduril"),
		@enabled          = true
	)
	
	//--- COMBINE REPORTS -----------------------------------------------------------------------------//

	degReportLst[ID] = LatexCombiner
	(
		array = {
			degVolcanoPlot.document,
			degTableUp, 
			degBoxplotUp,
			degTableDn, 
			degBoxplotDn, 
			exprHeatmap, 
			goEnrichment,
			network.report
		},
		sectionTitle=ID, 
		sectionType="subsection"
	)
}

//------------------------------------------------------------------------------------------------
//--- VENN DIAGRAM(S)
//------------------------------------------------------------------------------------------------

degSets = CSV2SetList(tables=degCalledLst)

venn = VennDiagram
(
	sets         = degSets,
	cexSetName   = 0.3,
	cexSetSize   = 0.3,
	doWeights    = true,
	sets1        = "ERvsNTd3,ERvsNTd8,ERvsNTd15",
	sectionTitle = "Gene set comparisons",
	sectionType  = "subsection",
	types        = "circles"
)

degReportLst["venn"] = venn.report

//------------------------------------------------------------------------------------------------
//--- VENN SETS
//------------------------------------------------------------------------------------------------

include "/mnt/projects/veronika/anduril/includes/venn.and"

vennSetsExpanded = ExpandCollapse(relation=venn.sets)

// --- intersection ERvsNTd3 and ERvsNTd8

vennSetTableReport_ERvsNTd3_AND_ERvsNTd8 = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"ERvsNTd3_AND_ERvsNTd8_AND_ERvsNTd15", "ERvsNTd3_AND_ERvsNTd8_AND_NOT_ERvsNTd15"},
	outputComparisons  = {"ERvsNTd3", "ERvsNTd8"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	section            = "Intersection ERvsNTd3 and ERvsNTd8",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed in both " + comparisons["ERvsNTd3"].desc + " (set 'A') and " + comparisons["ERvsNTd8"].desc + " (set 'B'). " +
	                     "Genes sorted by average FC from largest to smallest."
)
degReportLst["vennSetTableReport_ERvsNTd3_AND_ERvsNTd8"] = vennSetTableReport_ERvsNTd3_AND_ERvsNTd8.report

// --- intersection ERvsNTd3 and ERvsNTd15

vennSetTableReport_ERvsNTd3_AND_ERvsNTd15 = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"ERvsNTd3_AND_ERvsNTd8_AND_ERvsNTd15", "ERvsNTd3_AND_NOT_ERvsNTd8_AND_ERvsNTd15"},
	outputComparisons  = {"ERvsNTd3", "ERvsNTd15"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	section            = "Intersection ERvsNTd3 and ERvsNTd15",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed in both " + comparisons["ERvsNTd3"].desc + " (set 'A') and " + comparisons["ERvsNTd15"].desc + " (set 'B'). " +
	                     "Genes sorted by average FC from largest to smallest."
)
degReportLst["vennSetTableReport_ERvsNTd3_AND_ERvsNTd15"] = vennSetTableReport_ERvsNTd3_AND_ERvsNTd15.report

// --- intersection ERvsNTd8 and ERvsNTd15

vennSetTableReport_ERvsNTd8_AND_ERvsNTd15 = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"ERvsNTd3_AND_ERvsNTd8_AND_ERvsNTd15", "NOT_ERvsNTd3_AND_ERvsNTd8_AND_ERvsNTd15"},
	outputComparisons  = {"ERvsNTd8", "ERvsNTd15"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	section            = "Intersection ERvsNTd8 and ERvsNTd15",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed in both " + comparisons["ERvsNTd8"].desc + " (set 'A') and " + comparisons["ERvsNTd15"].desc + " (set 'B'). " +
	                     "Genes sorted by average FC from largest to smallest."
)
degReportLst["vennSetTableReport_ERvsNTd8_AND_ERvsNTd15"] = vennSetTableReport_ERvsNTd8_AND_ERvsNTd15.report

// --- intersection ERvsNTd3, ERvsNTd8, and ERvsNTd15

vennSetTableReport_ERvsNTd3_AND_ERvsNTd8_AND_ERvsNTd15 = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"ERvsNTd3_AND_ERvsNTd8_AND_ERvsNTd15"},
	outputComparisons  = {"ERvsNTd3", "ERvsNTd8", "ERvsNTd15"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	section            = "Intersection ERvsNTd3, ERvsNTd8, ERvsNTd15",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed in all three comparisons, including " + comparisons["ERvsNTd3"].desc + " (set 'A'), " + 
	                     comparisons["ERvsNTd8"].desc + " (set 'B'), and " + comparisons["ERvsNTd15"].desc + " (set 'C'). " +
	                     "Genes sorted by average FC from largest to smallest."
)
degReportLst["vennSetTableReport_ERvsNTd3_AND_ERvsNTd8_AND_ERvsNTd15"] = vennSetTableReport_ERvsNTd3_AND_ERvsNTd8_AND_ERvsNTd15.report

//------------------------------------------------------------------------------------------------
//--- EXPRESSION BOX PLOTS OF SELECTED GENES
//------------------------------------------------------------------------------------------------

boxplotER = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr,
	force sampleGroups = sampleGroups,
	includeGroups="kd-ER-d3,kd-ER-d8,kd-ER-d15,kd-NT-d3,kd-NT-d8,kd-NT-d15",
	annotation = geneAnnot,
	hgnc = "ETV6,RUNX1,ETV6-RUNX1,ETV6ex6to8,RUNX1ex1",
	nRow = 1,
	nCol = 5,
	height=4,
	labelOutliers=false,
	cexSampleLabel=0.3,
	cexGroupLabel=0.7,
	caption = 'Expression of ETV6 (exons 1-5), RUNX1 (all exons except first), over-expressed ETV6-RUNX1 fusion construct (quantified by reads mapping across the ETV6-RUNX1 fusion breakpoint), ' +
	          'endogenious ETV6 (exons 6 to 8), and endogenious RUNX1 (only exon 1).',
	sectionTitle="E/R genes", 
	sectionType="subsection"
)

boxplotSelectedGenes = LatexCombiner
(
	array        = {boxplotER.document}, 
	pagebreak    = true,
	sectionTitle = "Expression values of selected genes", 
	sectionType  = "section"
)

//------------------------------------------------------------------------------------------------
//--- POSITIONAL GENE ENRICHMENT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/veronika/anduril/includes/pgeReport.and"

pgeReportLst = record()
for comparison : std.itercsv(inputComparisons) {
	
	pgeReportLst[comparison.ID] = PGEReport
	(
		query=degCalledLst[comparison.ID], 
		reference=gtfCustom.optOut1, 
		title=comparison.ID,
		pvalue=0.01,
		includeHeader=std.length(pgeReportLst)==0,
		@name="pge_" + std.quote(comparison.ID, type="Anduril")
	)
}
	
pgeReport = LatexCombiner
(
	array=pgeReportLst, 
	pagebreak=true, 
	sectionTitle="Positional gene enrichment (PGE) of differentially expressed genes", 
	sectionType="section"
)
 

//------------------------------------------------------------------------------------------------
//--- COMBINED REPORT
//------------------------------------------------------------------------------------------------

rConfig = RConfigurationReport(packages = "base,csbl.go,DESeq2,igraph", sectionType = "section")
bibtexMoksiskaan = INPUT(path="/usr/local/share/anduril-bundles/moksiskaan/components/report-BibTeX/moksiskaan.bib")
bibtexSequencing = INPUT(path="/usr/local/share/anduril-bundles/sequencing/components/report-BibTeX/sequencing.bib")

docTemplate = LatexTemplate
(
	authors  = std.quote(authors, type="LaTeX"),
	bibtex1  = rConfig.citations,
	bibtex2  = bibtexMoksiskaan,
	bibtex3  = bibtexSequencing,
	title    = std.quote(title, type="LaTeX") + "\\newline Main Report",
	printTOC = true
)

degReport = LatexCombiner
(
	array        = degReportLst,
	pagebreak    = true,
	tail         = '\newpage{}',
	sectionTitle = "Differentially expressed genes"
)

combinedReport = LatexCombiner
(
	array={
		experimentReport,
		qcReport.report,
		degReport,
		boxplotSelectedGenes,
		pgeReport,
		rConfig.report
	}
)

combinedPDF = LatexPDF
(
	document = combinedReport,
	header   = docTemplate.header,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false
)

@out.out.filename = shortName + "-main.pdf"
OUTPUT(combinedPDF.document)

//------------------------------------------------------------------------------------------------
//--- EXCEL FILES WITH DIFFERENTIALLY EXPRESSED GENES
//------------------------------------------------------------------------------------------------

include "/mnt/projects/veronika/anduril/includes/degExcel.and"

degExcel = degExcelOutput
(
	degTables   = degCalledLst,
	degAllLst   = degAllLst,
	linkRule    = ensemblRef,
	geneNames   = geneNames,
	geneAnnot   = geneAnnot,
	comparisons  = comparisons,
	fdrCutoff    = 1
)
	
@out.out.filename = shortName + "-DE-genes.xls"
OUTPUT(degExcel.degs)

@out.out.filename = shortName + "-all-genes.xls"
OUTPUT(degExcel.allGenes)

//------------------------------------------------------------------------------------------------
//--- GENE SET ENRICHMENT ANALYSIS (GSEA)
//------------------------------------------------------------------------------------------------
include "/mnt/projects/veronika/anduril/includes/gsea.and"

// produce RNK files for each comparison

rnks = record()
for ID, comparison : comparisons 
{	
	rnks[ID] = DEG2Rnk
	(
		deg = degAllLst[ID],
		annotation = geneNames,
		colP = "p" + ID,
		colFC= "fc" + ID,
		@name = "rnk_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
}

// run GSEA for each comparison and database

enrichedUp = record()
enrichedDn = record()
minSetSize = record()
maxSetSize = record()
permutations = 1000

// MSigDB

category = "MSigDB"	
enrichedUp[category] = record() 
enrichedDn[category] = record() 
minSetSize[category] = 5
maxSetSize[category] = 5000

for ID, comparison : comparisons 
{	
	gseaMSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/msigdb5.0/c1.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c2.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c3.mir.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c5.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c6.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c7.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/h.all.v5.0.symbols.gmt," +
		        "/mnt/projects/generic/data/ccri/ccri_custom_gene_sets.gmt," +
		        "/mnt/projects/generic/data/laurenti_2013_hematopoietic_lineages.gmt", 
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaMSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaMSigDB.enrichedUp
	enrichedDn[category][ID] = gseaMSigDB.enrichedDown
}

// GeneSigDB

category = "GeneSigDB"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 5
maxSetSize[category] = 1000

for ID, comparison : comparisons 
{	
	gseaGeneSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/GeneSigDB/ALL_SIGSv4.nodup.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaGeneSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaGeneSigDB.enrichedUp
	enrichedDn[category][ID] = gseaGeneSigDB.enrichedDown
}
	
// DSigDB

category = "DSigDB"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 3
maxSetSize[category] = 1000

for ID, comparison : comparisons 
{	
	gseaDSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/DSigDB/DSigDB_v1.0_All.nodup.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaDSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaDSigDB.enrichedUp
	enrichedDn[category][ID] = gseaDSigDB.enrichedDown
}

// TF targets

category = "TFT"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 3
maxSetSize[category] = 5000

for ID, comparison : comparisons 
{	
	gseaTFTargets = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/iamp/data/anduril/encode_tf_chipseq.ucsc.hg19.gmt," +
		        "/mnt/projects/generic/data/pazar/pazar.gmt," +
		        "/mnt/projects/generic/data/msigdb5.0/c3.tft.v5.0.symbols.gmt," +
		        "/mnt/projects/generic/data/opossum3/jaspar_core.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaTFTargets_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaTFTargets.enrichedUp
	enrichedDn[category][ID] = gseaTFTargets.enrichedDown
}

// get GSEA reports (heatmap overview + tables with enriched gene sets) 

gseaReport = GSEAReport
(
	enrichedUp = enrichedUp,
	enrichedDn = enrichedDn,
	minSetSizes = minSetSize,
	maxSetSizes = maxSetSize,
	tableReportComparisons = comparisons,
	topNHeatmap = 80,
	topNTable = 100,
	expression = degAllLst,
	geneNames  = geneNames,
	sigCutoff = 0.3,
	hsigCutoff = 0.01,
	overlapSigCutoff = 0.3,
	overlapHSigCutoff = 0.01,
	@enabled = runGSEA
)

docTemplateGsea = LatexTemplate
(
	authors  = std.quote(authors, type="LaTeX"),
	bibtex1  = rConfig.citations,
	bibtex2  = bibtexSequencing,
	title    = std.quote(title, type="LaTeX") + "\\newline GSEA Report",
	printTOC = true
)

combinedPDFGsea = LatexPDF
(
	document = gseaReport,
	header   = docTemplateGsea.header,
	footer   = docTemplateGsea.footer,
	useRefs  = true,
	verbose  = false
)

@out.out.filename = shortName + "-GSEA.pdf"
OUTPUT(combinedPDFGsea.document)
